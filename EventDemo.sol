

 //SPDX-License-Identifier: MIT
 pragma solidity ^0.8.24;

 /**
 * 只能合约方法相关
 */
 contract FunctionContract {
        /**
        Solidity中的Events（事件）是EVM（以太坊虚拟机）上日志功能的抽象化实现，它们提供了一种机制来记录合约内部发生的重要事件，并允许外部应用（如DApp）监听这些事件。Events的用法主要包括以下几个方面：

        1. 定义事件
        在Solidity合约中，使用event关键字来定义事件。事件定义包括事件名称和事件参数列表。事件名称必须是大写，并且为了与函数名区分，通常建议至少有两个不同的字母。事件参数可以包含索引参数和非索引参数，索引参数可以帮助高效地过滤和搜索事件日志。

        2. 触发事件
        在合约的某个函数内部，当特定条件满足时，可以使用emit关键字来触发事件。emit后面跟上事件名称和事件所需的参数（如果有的话）。触发事件时，事件及其参数会被记录在以太坊区块链上的事件日志中。

        3. 记录链上发生的事情
        通过Events，可以记录链上发生的各种重要事件，如转账、投票、数据更新等。这些事件记录对于合约的审计、监控以及外部应用的交互都非常重要。

        4. 允许外部监听
        DApp或其他外部系统可以监听合约的事件，以便在事件触发时采取相应的操作。例如，当一个转账事件发生时，一个DApp可以监听该事件并更新用户界面以反映最新的余额信息。

        5. 提供交易的可追溯性
        由于事件日志是区块链上的一部分，它们具有不可篡改性和可验证性。这意味着任何人都可以查看和验证特定合约事件的发生和相关信息，从而提供了交易的可追溯性。

        6. 便宜的数据存储形式
        相比于在区块链上直接存储大量数据，使用Events来记录关键事件信息是一种更为经济的方式。因为事件日志只包含事件的名称和参数，而不包含完整的合约状态信息。

        7. 继承性
        在Solidity中，事件在合约中是可以被继承的。如果子合约继承了父合约，那么子合约也会继承父合约中定义的事件。这使得事件机制在合约的继承和扩展中非常有用。

        8. 安全性
        虽然事件本身并不直接影响合约的安全性，但通过合理使用事件，可以增加合约的透明度和可追溯性，从而有助于发现和防止潜在的安全漏洞
        */

         event Transfer(address indexed from, address indexed to, uint256 value);  
  
        function send(address recipient, uint256 amount) public {  
        // 假设这里有一些转账的逻辑  
        // ...  
  
        // 触发Transfer事件  
        emit Transfer(msg.sender, recipient, amount);  
    }  

 }

